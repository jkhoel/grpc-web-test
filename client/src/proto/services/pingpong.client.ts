// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "services/pingpong.proto" (package "proto.services.pingpong", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PingPongService } from "./pingpong";
import type { PingMessage } from "./pingpong";
import type { PingRequest } from "./pingpong";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServerTimeResponse } from "./pingpong";
import type { ClientTimeRequest } from "./pingpong";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service proto.services.pingpong.PingPongService
 */
export interface IPingPongServiceClient {
    /**
     * @generated from protobuf rpc: GetServerTime(proto.services.pingpong.ClientTimeRequest) returns (proto.services.pingpong.ServerTimeResponse);
     */
    getServerTime(input: ClientTimeRequest, options?: RpcOptions): UnaryCall<ClientTimeRequest, ServerTimeResponse>;
    /**
     * @generated from protobuf rpc: PingStream(proto.services.pingpong.PingRequest) returns (stream proto.services.pingpong.PingMessage);
     */
    pingStream(input: PingRequest, options?: RpcOptions): ServerStreamingCall<PingRequest, PingMessage>;
}
/**
 * @generated from protobuf service proto.services.pingpong.PingPongService
 */
export class PingPongServiceClient implements IPingPongServiceClient, ServiceInfo {
    typeName = PingPongService.typeName;
    methods = PingPongService.methods;
    options = PingPongService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetServerTime(proto.services.pingpong.ClientTimeRequest) returns (proto.services.pingpong.ServerTimeResponse);
     */
    getServerTime(input: ClientTimeRequest, options?: RpcOptions): UnaryCall<ClientTimeRequest, ServerTimeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClientTimeRequest, ServerTimeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PingStream(proto.services.pingpong.PingRequest) returns (stream proto.services.pingpong.PingMessage);
     */
    pingStream(input: PingRequest, options?: RpcOptions): ServerStreamingCall<PingRequest, PingMessage> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingRequest, PingMessage>("serverStreaming", this._transport, method, opt, input);
    }
}
