// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "services/pingpong.proto" (package "proto.services.pingpong", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message proto.services.pingpong.ClientTimeRequest
 */
export interface ClientTimeRequest {
    /**
     * @generated from protobuf field: int64 client_epoch_time = 1;
     */
    clientEpochTime: bigint;
}
/**
 * @generated from protobuf message proto.services.pingpong.ServerTimeResponse
 */
export interface ServerTimeResponse {
    /**
     * @generated from protobuf field: int64 server_epoch_time = 1;
     */
    serverEpochTime: bigint;
}
/**
 * @generated from protobuf message proto.services.pingpong.PingRequest
 */
export interface PingRequest {
    /**
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
}
/**
 * @generated from protobuf message proto.services.pingpong.PingMessage
 */
export interface PingMessage {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: int64 timestamp = 2;
     */
    timestamp: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientTimeRequest$Type extends MessageType<ClientTimeRequest> {
    constructor() {
        super("proto.services.pingpong.ClientTimeRequest", [
            { no: 1, name: "client_epoch_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ClientTimeRequest>): ClientTimeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientEpochTime = 0n;
        if (value !== undefined)
            reflectionMergePartial<ClientTimeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientTimeRequest): ClientTimeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 client_epoch_time */ 1:
                    message.clientEpochTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientTimeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 client_epoch_time = 1; */
        if (message.clientEpochTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.clientEpochTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.services.pingpong.ClientTimeRequest
 */
export const ClientTimeRequest = new ClientTimeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerTimeResponse$Type extends MessageType<ServerTimeResponse> {
    constructor() {
        super("proto.services.pingpong.ServerTimeResponse", [
            { no: 1, name: "server_epoch_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ServerTimeResponse>): ServerTimeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.serverEpochTime = 0n;
        if (value !== undefined)
            reflectionMergePartial<ServerTimeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerTimeResponse): ServerTimeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 server_epoch_time */ 1:
                    message.serverEpochTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerTimeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 server_epoch_time = 1; */
        if (message.serverEpochTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.serverEpochTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.services.pingpong.ServerTimeResponse
 */
export const ServerTimeResponse = new ServerTimeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRequest$Type extends MessageType<PingRequest> {
    constructor() {
        super("proto.services.pingpong.PingRequest", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingRequest>): PingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientId = "";
        if (value !== undefined)
            reflectionMergePartial<PingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingRequest): PingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.services.pingpong.PingRequest
 */
export const PingRequest = new PingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingMessage$Type extends MessageType<PingMessage> {
    constructor() {
        super("proto.services.pingpong.PingMessage", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PingMessage>): PingMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.timestamp = 0n;
        if (value !== undefined)
            reflectionMergePartial<PingMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingMessage): PingMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* int64 timestamp */ 2:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* int64 timestamp = 2; */
        if (message.timestamp !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.services.pingpong.PingMessage
 */
export const PingMessage = new PingMessage$Type();
/**
 * @generated ServiceType for protobuf service proto.services.pingpong.PingPongService
 */
export const PingPongService = new ServiceType("proto.services.pingpong.PingPongService", [
    { name: "GetServerTime", options: {}, I: ClientTimeRequest, O: ServerTimeResponse },
    { name: "PingStream", serverStreaming: true, options: {}, I: PingRequest, O: PingMessage },
    { name: "BidirectionalPingStream", serverStreaming: true, clientStreaming: true, options: {}, I: PingMessage, O: PingMessage }
]);
